/**
BSD 2-Clause License

Copyright (c) 2025, Andrey Kudryavtsev (andrewkoudr@hotmail.com)
All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

1. Redistributions of source code must retain the above copyright notice, this
   list of conditions and the following disclaimer.

2. Redistributions in binary form must reproduce the above copyright notice,
   this list of conditions and the following disclaimer in the documentation
   and/or other materials provided with the distribution.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/

/*******************************************************************************

  Templated CAD

  tbasics.h         - basics
    MATHEMATICS :
      tmisc         - miscellaneous
      tplane        - plane
      tmatrix       - matrix
      ttransform    - coordinate transformations
      tsystems      - systems of linear equations
      tvalues       - list of values std::vector<T>
      tpoints       - list of 3D points std::vector<std::vector<T>>
      tlsqfitting   - LSQ fitting with regular poly of low power
      tjacobipoly   - fitting with orthogonal polynomials
      tgaussint     - Gauss/Hammer numerical integration
    3D OBJECTS :
      tpoint            - 3-dimensional (0 parametric dimensions) point
      tbasecurve        - 3-dimensional (1 parametric dimension) non-composite curve (abstract class)
        tlsqsegment         - low-power poly generated by plain LSQ
        torthosegment       - segment based on Jacobi ortho poly
        tbeziersegment      - Bezier segment
        tbeziercurve        - Bezier curve (collection of Bezier segments)
        tpointcurve         - piecewise linear curve of points
        tsplinecurve        - B-spline curve

  Auxilliary for debugging and export
    strings.h/cpp       - strings
    export.h/cpp        - output curve/surface/solid to CAD file

      
  Some basic macros are here.

*******************************************************************************/

#pragma once

#include <limits>
#include <cmath>
#include <vector>
#include <assert.h>

namespace tcad {

// undefined
#define NOT_DEFINED -1
#ifndef NOT_FOUND
#define NOT_FOUND NOT_DEFINED
#endif

// useful macros
#define LIMIT(x,xmin,xmax) if (x < xmin) x = xmin; if (x > xmax) x = xmax
#define LIMIT_MIN(x,xmin) if (x < xmin) x = xmin
#define LIMIT_MAX(x,xmax) if (x > xmax) x = xmax

//===== Tolerances =============================================================

// tolerance
#define TOLERANCE(T) std::numeric_limits<T>::epsilon() * static_cast<T>(100.0)

// parametric tolerance
#define PARM_TOLERANCE 0.000001

// round
#define ROUND(x)  (int) (floor(x + .5))
#define ROUND_LINT(x)  (LINT) (floor(x + .5))

//===== PI - associated ========================================================

#ifndef M_PI
  #define M_PI    3.14159265358979323846
#endif

#ifndef PI05
  #define PI05 (M_PI * 0.5)
#endif

#ifndef PI20
  #define PI20 (M_PI * 2.0)
#endif

#ifndef PI10
  #define PI10 M_PI
#endif

// radians to degrees
#ifndef PCI
  #define PCI (180.0 / M_PI)
#endif

// degrees to radians
#ifndef CPI
  #define CPI (M_PI / 180.0)
#endif

// swap
#define SWAP(T,x1,x2) { T temp = x1; x1 = x2; x2 = temp; }

// LINT is always 64-bit
#define LINT long long int

// spline : do not try interpolation if a number of points is greater
// (slow and very probably bad solution - checked by residuals)
#define MAX_SPLINEINTERPOLATIONPOINTS 1500

// delete an instance of class
#define DELETE_CLASS(class_inst) if (class_inst) { delete class_inst; class_inst = nullptr; }

// default b-spline
#define SPLINE_DEGREE 3

// default number of points used for output, linearisation etc.
#define MANY_POINTS 501

}

